import time
import random
import logging
import telebot
from telebot import types
from core import templates
from core.utils import generate_main_menu, generate_meme_buttons
from core.fetchers import search_parrot_short, fetch_currency_rates, fetch_random_article

logger = logging.getLogger(__name__)

class UniversalBot:
    def __init__(self, api_token, youtube_api_key):
        self.bot = telebot.TeleBot(api_token)
        self.user_states = {}
        self.user_stats = {}
        self.youtube_api_key = youtube_api_key
        self.register_handlers()

    def register_handlers(self):
        self.bot.message_handler(commands=['start'])(self.send_welcome)
        self.bot.message_handler(func=lambda m: m.text == '/help' or m.text == '‚ùì –ü–æ–º–æ—â—å')(self.help_command)
        self.bot.message_handler(func=lambda m: m.text == '/about' or m.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')(self.about_command)
        self.bot.message_handler(commands=['stats'])(self.stats_command)
        self.bot.message_handler(func=lambda m: True)(self.handle_text)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_query)

    def send_welcome(self, message):
        reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
        reply.add(
            types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'),
            types.KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ')
        )
        self.bot.send_message(message.chat.id, "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ë–û–¢ –•–£–ô–ù–ò!\n –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=reply)
        self.bot.send_message(message.chat.id, "üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=generate_main_menu())

    def help_command(self, message):
        self.bot.send_message(message.chat.id, "üõ† –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/start ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n/stats ‚Äî —Å–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏–ª\n/about ‚Äî –æ –±–æ—Ç–µ\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!")

    def about_command(self, message):
        self.bot.send_message(message.chat.id, "üëæ –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ –ø—Ä–∏–∫–æ–ª—Éüê≤\nGitHub: https://github.com/ex1st-dev\nTelegram: @E25X55I75\n\n–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ë–û–¢ –•–£–ô–ù–ò ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–∞–≤–∏—Ç —Ö–∞–æ—Å –∏ –º–µ–º—ã! üí£")

    def stats_command(self, message):
        count = self.user_stats.get(message.chat.id, 0)
        self.bot.send_message(message.chat.id, f"üìà –¢—ã –ø–æ–ª—É—á–∏–ª {count} –º–µ–º–æ–≤, –≤–æ –∏—Å—Ç–∏–Ω—É —Ç—ã –º–µ–º–Ω—ã–π –º–∞–≥–∏—Å—Ç—Ä!")

    def handle_query(self, call):
        chat_id = call.message.chat.id
        self.bot.answer_callback_query(call.id)
        if call.data == 'meme_generator':
            self.bot.send_message(chat_id, "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASCII-–∞—Ä—Ç –ú–µ–º–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä!", reply_markup=generate_meme_buttons())
        elif call.data == 'random_number':
            self.bot.send_message(chat_id, "üé≤ –í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            self.user_states[chat_id] = 'waiting_for_min'
        elif call.data.startswith('feature_'):
            self.bot.send_message(chat_id, "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", reply_markup=generate_main_menu())
        elif call.data == 'back_to_main':
            self.bot.send_message(chat_id, "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=generate_main_menu())
        elif call.data == 'create_1':
            self.increment_user_stats(chat_id)
            template = random.choice(templates.templates)
            self.bot.send_message(chat_id, f"üëâ ASCII-–∞—Ä—Ç –º–µ–º:\n{template}", reply_markup=generate_meme_buttons())
        elif call.data == 'create_3':
            selected = random.sample(templates.templates, 3)
            for idx, template in enumerate(selected, start=1):
                self.increment_user_stats(chat_id)
                self.bot.send_message(chat_id, f"üëâ ASCII-–∞—Ä—Ç –º–µ–º {idx}:\n{template}")
                time.sleep(0.1)
            self.bot.send_message(chat_id, "‚úÖ –¢—Ä–æ–π–Ω–∞—è –ø–æ—Ä—Ü–∏—è –º–µ–º–æ–≤!", reply_markup=generate_meme_buttons())
        elif call.data == 'create_custom':
            self.bot.send_message(chat_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞:")
            self.user_states[chat_id] = 'waiting_for_text'
        elif call.data == 'bombard':
            self.bot.send_message(chat_id, "üí£ –ü–æ—à–ª–∞ –∂–∞—Ä–∞! –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –º–µ–º–∞–º–∏:")
            selected = random.sample(templates.templates, 10)
            for idx, template in enumerate(selected, start=1):
                self.increment_user_stats(chat_id)
                self.bot.send_message(chat_id, f"üí• –ú–µ–º {idx}:\n{template}")
                time.sleep(0.3)
            self.bot.send_message(chat_id, "üéØ –í—Å—ë –ø–æ–ª–µ –∑–∞–≤–∞–ª–µ–Ω–æ –º–µ–º–∞–º–∏!", reply_markup=generate_meme_buttons())
        elif call.data == 'currency_rates':
            try:
                data = fetch_currency_rates()
                usd_to_rub = round(data['rates']['RUB'], 2)
                eur_to_rub = round(data['rates']['RUB'] / data['rates']['EUR'], 2)
                kzt_to_rub = round(data['rates']['RUB'] / data['rates']['KZT'], 4)
                message = (
                    f"üí∞ *–ö—É—Ä—Å –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é:*\n\n"
                    f"üá∫üá∏ 1 –î–æ–ª–ª–∞—Ä = {usd_to_rub} ‚ÇΩ\n"
                    f"üá™üá∫ 1 –ï–≤—Ä–æ = {eur_to_rub} ‚ÇΩ\n"
                    f"üá∞üáø 1 –¢–µ–Ω–≥–µ = {kzt_to_rub} ‚ÇΩ\n"
                )
                self.bot.send_message(chat_id, message, parse_mode="Markdown", reply_markup=generate_main_menu())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
                self.bot.send_message(chat_id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.", reply_markup=generate_main_menu())
        elif call.data == 'random_article':
            try:
                data = fetch_random_article()
                title = data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                extract = data.get('extract', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                page_url = data.get('content_urls', {}).get('desktop', {}).get('page', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')
                message = f"üìö *{title}*\n\n{extract}\n\n[–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ–ª–Ω–æ—Å—Ç—å—é]({page_url})"
                self.bot.send_message(chat_id, message, parse_mode="Markdown", reply_markup=generate_main_menu())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –í–∏–∫–∏–ø–µ–¥–∏–∏: {e}")
                self.bot.send_message(chat_id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏.", reply_markup=generate_main_menu())
        elif call.data == 'fresh_parrot':
            link = search_parrot_short(self.youtube_api_key)
            if link:
                self.bot.send_message(chat_id, f"ü¶ú –õ–æ–≤–∏ –ø–æ–ø—É–≥–∞—è!\n{link}", reply_markup=generate_main_menu())
            else:
                self.bot.send_message(chat_id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ø—É–≥–∞—è...", reply_markup=generate_main_menu())

    def handle_text(self, message):
        chat_id = message.chat.id
        state = self.user_states.get(chat_id)
        if state == 'waiting_for_text':
            user_text = message.text
            self.user_states.pop(chat_id, None)
            self.increment_user_stats(chat_id)
            template = random.choice(templates.templates)
            if "{—Ç–≤–æ–π —Ç–µ–∫—Å—Ç —Å—é–¥–∞}" in template:
                meme = template.replace("{—Ç–≤–æ–π —Ç–µ–∫—Å—Ç —Å—é–¥–∞}", user_text)
            else:
                meme = f"{template}\n\nüñäÔ∏è –¢–≤–æ–π —Ç–µ–∫—Å—Ç: {user_text}"
            self.bot.send_message(chat_id, meme, reply_markup=generate_meme_buttons())
        elif state == 'waiting_for_min':
            try:
                self.user_states[chat_id] = {'min': int(message.text)}
                self.bot.send_message(chat_id, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            except ValueError:
                self.bot.send_message(chat_id, "üö´ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        elif isinstance(state, dict) and 'min' in state:
            try:
                min_val = state['min']
                max_val = int(message.text)
                if max_val < min_val:
                    self.bot.send_message(chat_id, "üö´ –ú–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                    return
                random_number = random.randint(min_val, max_val)
                self.bot.send_message(chat_id, f"üéØ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}: {random_number}", reply_markup=generate_main_menu())
                self.user_states.pop(chat_id, None)
            except ValueError:
                self.bot.send_message(chat_id, "üö´ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")

    def increment_user_stats(self, chat_id):
        self.user_stats[chat_id] = self.user_stats.get(chat_id, 0) + 1

    def run(self):
        while True:
            try:
                self.bot.infinity_polling()
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                time.sleep(3)